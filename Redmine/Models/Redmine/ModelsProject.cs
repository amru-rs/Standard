// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Redmine.Models.Redmine;
//
//    var modelsProject = ModelsProject.FromJson(jsonString);

namespace Red.Models.Redmine.Project
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ModelsProject
    {
        // public string jsonIssuesText = "{\"projects\":[{\"id\":28,\"name\":\"Airports Services\",\"identifier\":\"airports-services\",\"description\":\"Airport Services Issue Tracker\",\"status\":1,\"is_public\":true,\"created_on\":\"2019-11-13T12:39:59Z\",\"updated_on\":\"2019-11-13T12:40:12Z\"},{\"id\":56,\"name\":\"AVV  Melbourne Avalon Australia\",\"identifier\":\"avv-melbourne-avalon-australia\",\"description\":\"\",\"parent\":{\"id\":28,\"name\":\"Airports Services\"},\"status\":1,\"is_public\":true,\"created_on\":\"2019-12-09T08:16:35Z\",\"updated_on\":\"2019-12-09T08:16:35Z\"},{\"id\":57,\"name\":\"New Setup\",\"identifier\":\"setup\",\"description\":\"\",\"parent\":{\"id\":56,\"name\":\"AVV  Melbourne Avalon Australia\"},\"status\":1,\"is_public\":true,\"created_on\":\"2019-12-09T08:18:18Z\",\"updated_on\":\"2019-12-09T08:23:04Z\"}],\"total_count\":85,\"offset\":0,\"limit\":3}";

        [JsonProperty("projects")]
        public List<Project> Projects { get; set; }

        [JsonProperty("total_count")]
        public long TotalCount { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("limit")]
        public long Limit { get; set; }
    }

    public partial class Project
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("identifier")]
        public string Identifier { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("is_public")]
        public bool IsPublic { get; set; }

        [JsonProperty("created_on")]
        public DateTimeOffset CreatedOn { get; set; }

        [JsonProperty("updated_on")]
        public DateTimeOffset UpdatedOn { get; set; }

        [JsonProperty("parent", NullValueHandling = NullValueHandling.Ignore)]
        public Parent Parent { get; set; }
    }

    public partial class Parent
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class ModelsProject
    {
        public static ModelsProject FromJson(string json) => JsonConvert.DeserializeObject<ModelsProject>(json, Red.Models.Redmine.Project.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ModelsProject self) => JsonConvert.SerializeObject(self, Red.Models.Redmine.Project.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
