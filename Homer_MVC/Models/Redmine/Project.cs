// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Standard.Models.Redmine;
//
//    var project = Project.FromJson(jsonString);

namespace Standard.Models.Redmine.Project
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Project
    {
        public string jsonIssuesText = "{\"projects\":[{\"id\":28,\"name\":\"Airports Services\",\"identifier\":\"airports-services\",\"description\":\"Airport Services Issue Tracker\",\"status\":1,\"is_public\":true,\"created_on\":\"2019-11-13T12:39:59Z\",\"updated_on\":\"2019-11-13T12:40:12Z\"},{\"id\":56,\"name\":\"AVV  Melbourne Avalon Australia\",\"identifier\":\"avv-melbourne-avalon-australia\",\"description\":\"\",\"parent\":{\"id\":28,\"name\":\"Airports Services\"},\"status\":1,\"is_public\":true,\"created_on\":\"2019-12-09T08:16:35Z\",\"updated_on\":\"2019-12-09T08:16:35Z\"},{\"id\":57,\"name\":\"New Setup\",\"identifier\":\"setup\",\"description\":\"\",\"parent\":{\"id\":56,\"name\":\"AVV  Melbourne Avalon Australia\"},\"status\":1,\"is_public\":true,\"created_on\":\"2019-12-09T08:18:18Z\",\"updated_on\":\"2019-12-09T08:23:04Z\"}],\"total_count\":85,\"offset\":0,\"limit\":3}";

        [JsonProperty("projects")]
        public List<ProjectElement> Projects { get; set; }

        [JsonProperty("total_count")]
        public long TotalCount { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("limit")]
        public long Limit { get; set; }
    }

    public partial class ProjectElement
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("identifier")]
        public string Identifier { get; set; }

        [JsonProperty("description")]
        public Description Description { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("is_public")]
        public bool IsPublic { get; set; }

        [JsonProperty("created_on")]
        public DateTimeOffset CreatedOn { get; set; }

        [JsonProperty("updated_on")]
        public DateTimeOffset UpdatedOn { get; set; }

        [JsonProperty("parent", NullValueHandling = NullValueHandling.Ignore)]
        public Parent Parent { get; set; }
    }

    public partial class Parent
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public Name Name { get; set; }
    }

    public enum Description { AirportServicesIssueTracker, Empty };

    public enum Name { AirportsServices, ApiManagement, AvvMelbourneAvalonAustralia, PerPerthAustralia };

    public partial class Project
    {
        public static Project FromJson(string json) => JsonConvert.DeserializeObject<Project>(json, Standard.Models.Redmine.Project.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Project self) => JsonConvert.SerializeObject(self, Standard.Models.Redmine.Project.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DescriptionConverter.Singleton,
                NameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DescriptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Description) || t == typeof(Description?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Description.Empty;
                case "Airport Services Issue Tracker":
                    return Description.AirportServicesIssueTracker;
            }
            throw new Exception("Cannot unmarshal type Description");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Description)untypedValue;
            switch (value)
            {
                case Description.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Description.AirportServicesIssueTracker:
                    serializer.Serialize(writer, "Airport Services Issue Tracker");
                    return;
            }
            throw new Exception("Cannot marshal type Description");
        }

        public static readonly DescriptionConverter Singleton = new DescriptionConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "API Management":
                    return Name.ApiManagement;
                case "AVV  Melbourne Avalon Australia":
                    return Name.AvvMelbourneAvalonAustralia;
                case "Airports Services":
                    return Name.AirportsServices;
                case "PER Perth Australia":
                    return Name.PerPerthAustralia;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            switch (value)
            {
                case Name.ApiManagement:
                    serializer.Serialize(writer, "API Management");
                    return;
                case Name.AvvMelbourneAvalonAustralia:
                    serializer.Serialize(writer, "AVV  Melbourne Avalon Australia");
                    return;
                case Name.AirportsServices:
                    serializer.Serialize(writer, "Airports Services");
                    return;
                case Name.PerPerthAustralia:
                    serializer.Serialize(writer, "PER Perth Australia");
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }
}
